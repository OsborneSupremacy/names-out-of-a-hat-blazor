@using NamesOutOfAHat2.Model

<SectionHeading Text="Select The Gift Exchange Organizer" />

@if (Hat.Organizer is not null) {
    <p class="lead">@Hat.Organizer.Person.Name is the Organizer</p>
}
@foreach(var participant in Hat.Participants)
{
    <div style="cursor: pointer" class="@GetClass(participant.Person.Id)" role="alert" @onclick="(() => SetOrganizer(participant))">
        @participant.Person.Name
    </div>
}

<ButtonArea>
    @if (Hat.Organizer is not null)
    {
        <PrimaryButton ClickedCallback="NextCallback" Text="Everything Looks Good. Continue." />
    }
    <BackButton ClickedCallback="PreviousCallback" Text="Go Back" />
</ButtonArea>

@code {

    [Parameter, EditorRequired]
    public Hat Hat { get; set; }

    [Parameter, EditorRequired]
    public EventCallback NextCallback { get; set; }

    [Parameter, EditorRequired]
    public EventCallback PreviousCallback { get; set; }


    private string GetClass(Guid id)
    {
        if (id == (Hat.Organizer?.Person.Id ?? Guid.Empty )) return "alert alert-primary";
        return "alert alert-secondary";
    }

    async void SetOrganizer(Participant participant)
    {
        Hat.Organizer = participant;
    }
}
