@page "/"
@inject NamesOutOfAHat2.Interface.ILocalStorageService Storage
@inject NamesOutOfAHat2.Service.ValidationService ValidationService
@inject NamesOutOfAHat2.Service.EligibilityValidationService EligibilityValidationService
@inject NamesOutOfAHat2.Service.HatShakerService HatShakerService
@inject NamesOutOfAHat2.Service.ClientMessenger ClientMessenger
@inject NamesOutOfAHat2.Service.EmailStagingService EmailStagingService
@inject NamesOutOfAHat2.Service.HatService HatService
@inject NavigationManager NavigationManager

@using System.Text.Json
@using NamesOutOfAHat2.Model
@using NamesOutOfAHat2.Utility

<div class="bg-light rounded-3">
    <div class="container-fluid py-5">
        <div class="jumbotron">
            <p>
                <input 
                    aria-label="Gift Exchange Name"
                    type="text"
                    name="GiftExchangeName"
                    class="form-control form-control-lg"
                    @bind-value="Hat.Name"
                    placeholder="Exter the Name of Your Gift Exchange (optional)"
                    style="text-align: center"
                    />
            </p>
            @if(Mode.In(Modes.Default, Modes.Adding, Modes.ShowingErrors))
            {
                <h2 class="display-5">Put everyone's name in the hat!</h2>
            }
        </div>

        @if(Mode.In(Modes.Default, Modes.Adding))
        {
            <p>
                <button type="button" @onclick="SwitchToAddMode" class="btn btn-primary">Add a Participant</button>
            </p>
        }

        @if(Mode.In(Modes.Adding))
        {
            <AddParticipant Person="@Person" PersonAddedCallback="@PersonAdded" CancelCallback="@Cancelled" />
        }

        @if(Mode.In(Modes.Default) && (Hat.Participants?.Any() ?? false))
        {
            @foreach(var participant in Hat.Participants)
            {
                <ParticipantDisplay Participant="@participant" ParticpantEditedCallback="@ParticipantEdited" />
            }

            <div class="container-fluid py-5">
                <h4>Click the button below to "Shake Up The Hat"</h4>
                <p>
                    <button aria-label="Shake Up The Hat" type="button" @onclick="ShakeUpTheHat" class="btn btn-primary btn-lg">Shake Up The Hat!</button>
                </p>
                <h5>If names can be picked successfully, we'll confirm with you, before sending emails to the participants.</h5>
            </div>
        }

        @if(Mode.In(Modes.ShowingErrors))
        {
            <div class="alert alert-danger" role="alert">
                <h4>There is a problem with the names in the hat.</h4>
                <hr>
                @if(Errors.Any())
                {
                    <ul>
                        @foreach(var error in Errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }
            </div>

            <p>
                <button aria-label="Go Back" type="button" @onclick="SwitchToDefaultMode" class="btn btn-warning">Go Back</button>
            </p>
        }

        @if(Mode.In(Modes.Verification))
        {
            <div class="container-fluid py-5">

                <div class="alert alert-light" role="alert">
                    <h4 class="alert-heading">The Hat Was Shaken, and Names Were Picked Successfully!</h4>
                    <hr>
                    <p class="mb-0">Does everything below look good?</p>
                </div>

                <Verification Hat="@Hat" />

            </div>

            <p>
                <button aria-label="Continue" type="button" @onclick="SwitchToOrganizerMode" class="btn btn-primary btn-lg">Everything Looks Good. Continue.</button>
            </p>

            <p>
                <button aria-label="Go Back" type="button" @onclick="SwitchToDefaultMode" class="btn btn-warning">Go Back</button>
            </p>
        }

        @if(Mode.In(Modes.Organizer))
        {
            <OrganizerSelect Hat="@Hat" />

            @if(Hat.Organizer is not null)
            {
                <p>
                    <button aria-label="Continue" type="button" @onclick="SwitchToEmailCompositionMode" class="btn btn-primary btn-lg">Everything Looks Good. Continue.</button>
                </p>
            }

            <p>
                <button aria-label="Go Back" type="button" @onclick="SwitchToVerificationMode" class="btn btn-warning">Go Back</button>
            </p>
        }

        @if(Mode.In(Modes.EmailComposition))
        {
            <div class="container-fluid py-5">
                <div class="alert alert-light" role="alert">
                    <h4 class="alert-heading">Here is the Email That Will Be Sent to Participants</h4>
                    <hr>
                    <p class="mb-0" style="text-align: left;">
                        @((MarkupString)EmailStagingService.GenerateEmailTemplate(Hat))
                    </p>
                    <hr>
                    <div class="mb-3">
                        <input type="text" class="form-control" @bind-value="Hat.PriceRange" placeholder="Gift Price Range (optional)" ng-maxlength="500" />
                    </div>
                    <div class="mb-3"> 
                        <input type="text" class="form-control" @bind-value="Hat.AdditionalInformation" placeholder="Additional Info (optional)" ng-maxlength="1000" />
                    </div>
                </div>
            </div>

            <p>
                <button aria-label="Continue" type="button" @onclick="Finalize" class="btn btn-primary btn-lg">Everything Looks Good. Send Emails!</button>
            </p>

            <p>
                <button aria-label="Go Back" type="button" @onclick="SwitchToOrganizerMode" class="btn btn-warning">Go Back</button>
            </p>
        }

        @if(Mode.In(Modes.Success))
        {
            <div class="container-fluid py-5">
                <div class="alert alert-light" role="alert">
                    <h4 class="alert-heading">Done!</h4>
                    <hr>
                    <p class="mb-0">
                        The emails have been sent! If someone did not get an email, ask them to check their junk mail folder(s).
                        <br /><br />
                        For Gmail users especially, have them check the many folders that Gmail sometimes automatically files emails under (e.g. Social, Updates, Forums, Promotions).
                        <br /><br />
                        If some participants still didn't get an email, try a different email address for them. You'll have to go back to the first step and re-send all emails.
                        <br /><br />
                        If you don't want to do that, here's a trick -- click F12 on your keyboard, select Application, then Local Storage, then this website. You should see an item named "Hat". That item contains all of the information related to this gift exchange.
                    </p>
                </div>
            </div>

            <p>
                <button aria-label="Go Back" type="button" @onclick="SwitchToDefaultMode" class="btn btn-primary btn-lg">Go Back To The Hat</button>
            </p>
        }

    </div>
</div>

@code {
    Person? Person;

    Hat Hat = new Hat();

    Modes Mode = Modes.Default;

    enum Modes
    {
        Default,
        Adding,
        ShowingErrors,
        Verification,
        Organizer,
        EmailComposition,
        Success,
        Failure
    }

    protected override async void OnInitialized() 
    {
        var savedHat = await TryLoadFromLocalStorageAsync();
        if (savedHat.success)
        {
            Hat = savedHat.hat!;
            StateHasChanged();
        }
        else
            SwitchToAddMode();
    }

    void SwitchToAddMode()
    {
        Person = new Person() { Id = System.Guid.NewGuid() };
        Mode = Modes.Adding;
    }

    async Task SwitchToDefaultMode()
    {
        Mode = Modes.Default;
        await SaveToLocalStorage();
    }

    async Task SwitchToVerificationMode()
    {
        Mode = Modes.Verification;
        await SaveToLocalStorage();
    }

    async Task SwitchToOrganizerMode()
    {
        Mode = Modes.Organizer;
        await SaveToLocalStorage();
    }

    async Task SwitchToEmailCompositionMode()
    {
        Mode = Modes.EmailComposition;
        await SaveToLocalStorage();
    }

    void Cancelled()
    {
        Mode = Modes.Default;
    }

    void SwitchMode(Modes mode) => Mode = mode;

    async void ParticipantEdited(Participant participant)
    {
        StateHasChanged();
        await SaveToLocalStorage();
    }

    async Task PersonAdded(Person person)
    {
        Hat = HatService.AddParticipant(Hat, person);
        SwitchMode(Modes.Default);
        await SaveToLocalStorage();
    }

    async Task<(bool success, Hat? hat)> TryLoadFromLocalStorageAsync()
    {
        Hat? hat = null;
        var hatJson = await Storage.GetFromLocalStorage("hat");

        try
        {
            hat = JsonSerializer.Deserialize<Hat>(hatJson);
        } catch
        {
            return (false, hat);
        }

        if (!hat?.Participants?.Any() ?? false)
            return (false, hat);
        
        hat = HatService.ReconstructParticipants(hat!);

        return (true, hat);
    }

    async Task SaveToLocalStorage()
    {
        var hatJson = JsonSerializer.Serialize(Hat);
        await Storage.SetLocalStorage("hat", hatJson);
    }

    List<string> Errors;

    async Task ShakeUpTheHat()
    {
        await SaveToLocalStorage();

        var (isValid, errors) = ValidationService.Validate(Hat);

        if(isValid)
            (isValid, errors) = EligibilityValidationService.Validate(Hat);

        if(isValid)
            (isValid, errors, Hat) = HatShakerService.ShakeMultiple(Hat, 100);

        Errors = errors!.ToList();

        if (!isValid)
            SwitchMode(Modes.ShowingErrors);
        else
            SwitchMode(Modes.Verification);
    }

    async Task Finalize()
    {
        await SaveToLocalStorage();
        await ClientMessenger.SendAsync(NavigationManager, Hat);
        SwitchMode(Modes.Success);
    }

}