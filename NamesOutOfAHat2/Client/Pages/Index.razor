@page "/"
@inject NamesOutOfAHat2.Interface.ILocalStorageService Storage
@inject NamesOutOfAHat2.Service.ValidationService ValidationService
@inject NamesOutOfAHat2.Service.EligibilityValidationService EligibilityValidationService
@inject NamesOutOfAHat2.Service.HatShakerService HatShakerService
@inject NamesOutOfAHat2.Client.Service.ClientHttpService ClientHttpService
@inject NamesOutOfAHat2.Service.HatService HatService
@inject NavigationManager NavigationManager

@using System.Text.Json
@using NamesOutOfAHat2.Model
@using NamesOutOfAHat2.Utility

<div class="container my-5">
    <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-lg">
        <div class="col-lg-12 p-3 p-lg-5 pt-lg-3">

            @if (Mode.In(Modes.Default, Modes.Adding))
            {
                <SectionHeading Text="Put everyone's name in the hat!" />
            }

            @if (Mode.In(Modes.Default))
            {
                <p>
                    <button type="button" @onclick="AddMode" class="btn btn-primary">Add a Participant</button>
                </p>
            }

            @if (Mode.In(Modes.Adding))
            {
                <AddParticipant Person="@Person" PersonAddedCallback="@PersonAdded" CancelCallback="@DefaultMode" />
            }

            @if (Mode.In(Modes.Default) && (Hat.Participants?.Any() ?? false))
            {
                @foreach (var participant in Hat.Participants)
                {
                    <ParticipantDisplay Participant="@participant" ParticpantEditedCallback="@ParticipantEdited" ParticipantRemovedCallback="@ParticipantRemoved" />
                }

                <ButtonArea>
                    <PrimaryButton ClickedCallback="ShakeUpTheHat" Text="Shake Up The Hat" />
                </ButtonArea>
            }

            @if (Mode.In(Modes.ShowingErrors))
            {
                <SectionHeading Text="There is a problem with the hat." />

                <div class="alert alert-danger" role="alert">
                    @if (Errors.Any())
                    {
                        <ul>
                            @foreach (var error in Errors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    }
                </div>

                <BackButton ClickedCallback="DefaultMode" Text="Go Back" />
            }

            @if (Mode.In(Modes.Verification))
            {
                <Verification Hat="@Hat" NextCallback="NextMode" PreviousCallback="DefaultMode" />
            }

            @if (Mode.In(Modes.Organizer))
            {
                <OrganizerSelect Hat="@Hat" NextCallback="NextMode" PreviousCallback="PreviousMode" />
            }

            @if (Mode.In(Modes.SendVerifyEmail))
            {
                <SendVerificationEmail Hat="@Hat" NextCallback="NextMode" NextSkipStepCallback="NextModeSkipStep" PreviousCallback="PreviousMode" />
            }

            @if (Mode.In(Modes.ConfirmationCodeEntry))
            {
                <ConfirmationCodeEntry Hat="@Hat" NextCallback="NextMode" PreviousCallback="PreviousMode" />
            }

            @if (Mode.In(Modes.EmailComposition))
            {
                <EmailPreview Hat="@Hat" NextCallback="Finalize" PreviousCallback="PreviousMode" />
            }

            @if (Mode.In(Modes.Success))
            {
                <Success Hat="@Hat" NextCallback="DefaultMode" />
            }

            @if(Mode.In(Modes.Failure))
            {
                <ErrorDisplay ErrorDetails="@ErrorDetails" NextCallback="DefaultMode" />
            }

        </div>
    </div>
</div>

@code {
    Person? Person;

    Hat Hat = new ();

    Modes Mode = Modes.Default;

    string EmailPreviewText = default!;

    string ErrorDetails = default!;

    enum Modes : int
    {
        Default = 0,
        Adding = 1,
        ShowingErrors = 2,
        Verification = 3,
        Organizer = 4,
        SendVerifyEmail = 5,
        ConfirmationCodeEntry = 6,
        EmailComposition = 7,
        Success = 8,
        Failure = 9
    }

    protected override async void OnInitialized()
    {
        var savedHat = await TryLoadFromLocalStorageAsync();
        if (savedHat.success)
        {
            Hat = savedHat.hat!;
            StateHasChanged();
        }
        else
            AddMode();
    }

    void AddMode()
    {
        Person = new Person() { Id = System.Guid.NewGuid() };
        Mode = Modes.Adding;
    }

    async Task NextMode()
    {
        Mode++;
        await SaveToLocalStorage();
    }

    async Task NextModeSkipStep()
    {
        Mode++;
        Mode++;
        await SaveToLocalStorage();
    }

    async Task PreviousMode()
    {
        Mode--;
        await SaveToLocalStorage();
    }

    async Task DefaultMode()
    {
        Mode = Modes.Default;
        await SaveToLocalStorage();
    }

    void SwitchMode(Modes mode) => Mode = mode;

    async void ParticipantEdited(Participant participant)
    {
        StateHasChanged();
        await SaveToLocalStorage();
    }

    async void ParticipantRemoved(Participant participant)
    {
        Hat = HatService.RemoveParticipant(Hat, participant);
        StateHasChanged();
        await SaveToLocalStorage();
    }

    async Task PersonAdded(Person person)
    {
        Hat = HatService.AddParticipant(Hat, person);
        await DefaultMode();
        await SaveToLocalStorage();
    }

    async Task SendCodeAndAdvance()
    {
        var (success, details) = await ClientHttpService.SendVerificationAsync(NavigationManager, Hat);

        if(success)
            await NextMode();
        else
        {
            ErrorDetails = details;
            SwitchMode(Modes.Failure);
        }
    }

    async Task<(bool success, Hat? hat)> TryLoadFromLocalStorageAsync()
    {
        Hat? hat = null;
        var hatJson = await Storage.GetFromLocalStorage("hat");

        try
        {
            hat = JsonSerializer.Deserialize<Hat>(hatJson);
        }
        catch
        {
            return (false, hat);
        }

        if (!hat?.Participants?.Any() ?? false)
            return (false, hat);

        hat = HatService.ReconstructParticipants(hat!);

        return (true, hat);
    }

    async Task SaveToLocalStorage()
    {
        var hatJson = JsonSerializer.Serialize(Hat);
        await Storage.SetLocalStorage("hat", hatJson);
    }

    List<string> Errors = default!;

    async Task ShakeUpTheHat()
    {
        await SaveToLocalStorage();

        var (isValid, errors) = ValidationService.Validate(Hat);

        if (isValid)
            (isValid, errors) = EligibilityValidationService.Validate(Hat);

        if (isValid)
            (isValid, errors, Hat) = HatShakerService.ShakeMultiple(Hat, 100);

        Errors = errors!.ToList();

        if (!isValid)
            SwitchMode(Modes.ShowingErrors);
        else
            SwitchMode(Modes.Verification);
    }

    async Task Finalize()
    {
        await SaveToLocalStorage();
        var (success, details) = await ClientHttpService.SendAsync(NavigationManager, Hat);

        if(success)
        {
            SwitchMode(Modes.Success);
        } else
        {
            ErrorDetails = details;
            SwitchMode(Modes.Failure);
        }
    }

}