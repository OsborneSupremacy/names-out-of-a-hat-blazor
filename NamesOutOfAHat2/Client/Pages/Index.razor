@page "/"
@inject NamesOutOfAHat2.Interface.ILocalStorageService Storage
@inject NamesOutOfAHat2.Service.ValidationService ValidationService
@inject NamesOutOfAHat2.Service.EligibilityValidationService EligibilityValidationService
@inject NamesOutOfAHat2.Service.HatShakerService HatShakerService
@inject NamesOutOfAHat2.Client.Service.ClientMessenger ClientMessenger
@inject NamesOutOfAHat2.Service.HatService HatService
@inject NavigationManager NavigationManager

@using System.Text.Json
@using NamesOutOfAHat2.Model
@using NamesOutOfAHat2.Utility

<div class="container my-5">
    <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-lg">
        <div class="col-lg-12 p-3 p-lg-5 pt-lg-3">

            @if (Mode.In(Modes.Default, Modes.Adding))
            {
                <SectionHeading Text="Put everyone's name in the hat!" />
            }

            @if (Mode.In(Modes.Default))
            {
                <p>
                    <button type="button" @onclick="SwitchToAddMode" class="btn btn-primary">Add a Participant</button>
                </p>
            }

            @if (Mode.In(Modes.Adding))
            {
                <AddParticipant Person="@Person" PersonAddedCallback="@PersonAdded" CancelCallback="@Cancelled" />
            }

            @if (Mode.In(Modes.Default) && (Hat.Participants?.Any() ?? false))
            {
                @foreach (var participant in Hat.Participants)
                {
                    <ParticipantDisplay Participant="@participant" ParticpantEditedCallback="@ParticipantEdited" ParticipantRemovedCallback="@ParticipantRemoved" />
                }

                <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                    <PrimaryButton ClickedCallback="ShakeUpTheHat" Text="Shake Up The Hat" />
                </div>
            }

            @if (Mode.In(Modes.ShowingErrors))
            {
                <SectionHeading Text="There is a problem with the hat." />

                <div class="alert alert-danger" role="alert">
                    @if (Errors.Any())
                    {
                        <ul>
                            @foreach (var error in Errors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    }
                </div>

                <BackButton ClickedCallback="SwitchToDefaultMode" Text="Go Back" />
            }

            @if (Mode.In(Modes.Verification))
            {
                <Verification Hat="@Hat" />
                <PrimaryButton ClickedCallback="SwitchToOrganizerMode" Text="Everything Looks Good. Continue." />
                <BackButton ClickedCallback="SwitchToDefaultMode" Text="Go Back" />
            }

            @if (Mode.In(Modes.Organizer))
            {
                <OrganizerSelect Hat="@Hat" OrganizerSelectedCallback="OrganizerSelected" />
                <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                    @if (Hat.Organizer is not null)
                    {
                        <PrimaryButton ClickedCallback="SwitchToEmailCompositionMode" Text="Everything Looks Good. Continue." />
                    }
                    <BackButton ClickedCallback="SwitchToVerificationMode" Text="Go Back" />
                </div>
            }

            @if (Mode.In(Modes.EmailComposition))
            {
                <EmailPreview Hat="@Hat" />
                <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                    <PrimaryButton ClickedCallback="Finalize" Text="Everything Looks Good. Send Emails!" />
                    <BackButton ClickedCallback="SwitchToOrganizerMode" Text="Go Back" />
                </div>
            }

            @if (Mode.In(Modes.Success))
            {
                <SectionHeading Text="Done!" Lead="The emails have been sent!" />

                <hr>
                <p class="mb-0">
                    If someone did not get an email, ask them to check their junk mail folder(s).
                    <br /><br />
                    For Gmail users especially, have them check the many folders that Gmail sometimes automatically files emails under (e.g. Social, Updates, Forums, Promotions).
                    <br /><br />
                    If some participants still didn't get an email, try a different email address for them. You'll have to go back to the first step and re-send all emails.
                    <br /><br />
                    If you don't want to do that, here's a trick -- click F12 on your keyboard, select Application, then Local Storage, then this website. You should see an item named "Hat". That item contains all of the information related to this gift exchange.
                </p>

                <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                    <PrimaryButton ClickedCallback="SwitchToDefaultMode" Text="Go Back To The Hat" />
                </div>
            }

            @if(Mode.In(Modes.Failure))
            {
                <SectionHeading Text="Oh, no. Something went wrong!" Lead="Sorry, but something went wrong. I don't have great error handling yet, but the details of the error are below." />

                <div class="alert alert-danger" role="alert">
                    @ErrorDetails
                </div>

                <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                    <PrimaryButton ClickedCallback="SwitchToDefaultMode" Text="Try Again" />
                </div>
            }

        </div>
    </div>
</div>




@code {
    Person? Person;

    Hat Hat = new Hat();

    Modes Mode = Modes.Default;

    string ErrorDetails;

    enum Modes
    {
        Default,
        Adding,
        ShowingErrors,
        Verification,
        Organizer,
        EmailComposition,
        Success,
        Failure
    }

    protected override async void OnInitialized()
    {
        var savedHat = await TryLoadFromLocalStorageAsync();
        if (savedHat.success)
        {
            Hat = savedHat.hat!;
            StateHasChanged();
        }
        else
            SwitchToAddMode();
    }

    void SwitchToAddMode()
    {
        Person = new Person() { Id = System.Guid.NewGuid() };
        Mode = Modes.Adding;
    }

    async Task SwitchToDefaultMode()
    {
        Mode = Modes.Default;
        await SaveToLocalStorage();
    }

    async Task SwitchToVerificationMode()
    {
        Mode = Modes.Verification;
        await SaveToLocalStorage();
    }

    async Task SwitchToOrganizerMode()
    {
        Mode = Modes.Organizer;
        await SaveToLocalStorage();
    }

    async Task SwitchToEmailCompositionMode()
    {
        Mode = Modes.EmailComposition;
        await SaveToLocalStorage();
    }

    void Cancelled()
    {
        Mode = Modes.Default;
    }

    void SwitchMode(Modes mode) => Mode = mode;

    async void ParticipantEdited(Participant participant)
    {
        StateHasChanged();
        await SaveToLocalStorage();
    }

    async void ParticipantRemoved(Participant participant)
    {
        Hat = HatService.RemoveParticipant(Hat, participant);
        StateHasChanged();
        await SaveToLocalStorage();
    }

    async Task PersonAdded(Person person)
    {
        Hat = HatService.AddParticipant(Hat, person);
        SwitchMode(Modes.Default);
        await SaveToLocalStorage();
    }

    async Task OrganizerSelected()
    {
        StateHasChanged();
    }

    async Task<(bool success, Hat? hat)> TryLoadFromLocalStorageAsync()
    {
        Hat? hat = null;
        var hatJson = await Storage.GetFromLocalStorage("hat");

        try
        {
            hat = JsonSerializer.Deserialize<Hat>(hatJson);
        }
        catch
        {
            return (false, hat);
        }

        if (!hat?.Participants?.Any() ?? false)
            return (false, hat);

        hat = HatService.ReconstructParticipants(hat!);

        return (true, hat);
    }

    async Task SaveToLocalStorage()
    {
        var hatJson = JsonSerializer.Serialize(Hat);
        await Storage.SetLocalStorage("hat", hatJson);
    }

    List<string> Errors;

    async Task ShakeUpTheHat()
    {
        await SaveToLocalStorage();

        var (isValid, errors) = ValidationService.Validate(Hat);

        if (isValid)
            (isValid, errors) = EligibilityValidationService.Validate(Hat);

        if (isValid)
            (isValid, errors, Hat) = HatShakerService.ShakeMultiple(Hat, 100);

        Errors = errors!.ToList();

        if (!isValid)
            SwitchMode(Modes.ShowingErrors);
        else
            SwitchMode(Modes.Verification);
    }

    async Task Finalize()
    {
        await SaveToLocalStorage();
        var (success, details) = await ClientMessenger.SendAsync(NavigationManager, Hat);

        if(success)
        {
            SwitchMode(Modes.Success);
        } else
        {
            ErrorDetails = details;
            SwitchMode(Modes.Failure);
        }
    }

}