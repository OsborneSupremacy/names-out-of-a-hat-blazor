@page "/"
@inject NamesOutOfAHat2.Interface.ILocalStorageService Storage
@inject NamesOutOfAHat2.Service.ValidationService ValidationService
@inject NamesOutOfAHat2.Service.EligibilityValidationService EligibilityValidationService
@inject NamesOutOfAHat2.Service.HatShakerService HatShakerService

@using System.Text.Json
@using NamesOutOfAHat2.Model
@using NamesOutOfAHat2.Utility

<div class="bg-light rounded-3">
    <div class="container-fluid py-5">
        <div class="jumbotron">
            <p>
                <input 
                    aria-label="Gift Exchange Name"
                    type="text"
                    name="GiftExchangeName"
                    class="form-control form-control-lg"
                    @bind-value="Hat.Name"
                    placeholder="Exter the Name of Your Gift Exchange (optional)"
                    style="text-align: center"
                    />
            </p>
            @if(Mode.In(Modes.Default, Modes.Adding, Modes.ShowingErrors))
            {
                <h2 class="display-5">Put everyone's name in the hat!</h2>
            }
        </div>

        @if(Mode.In(Modes.Default, Modes.Adding))
        {
            <p>
                <button type="button" @onclick="SwitchToAddMode" class="btn btn-primary">Add a Participant</button>
            </p>
        }

        @if(Mode.In(Modes.Adding))
        {
            <AddParticipant Person="@Person" PersonAddedCallback="@PersonAdded" CancelCallback="@Cancelled" />
        }

        @if(Mode.In(Modes.Default) && (Hat.Participants?.Any() ?? false))
        {
            @foreach(var participant in Hat.Participants)
            {
                <ParticipantDisplay Participant="@participant" ParticpantEditedCallback="@ParticipantEdited" />
            }

            <div class="container-fluid py-5">
                <h4>Click the button below to "Shake Up The Hat"</h4>
                <p>
                    <button aria-label="Shake Up The Hat" type="button" @onclick="ShakeUpTheHat" class="btn btn-primary btn-lg">Shake Up The Hat!</button>
                </p>
                <h5>If names can be picked successfully, we'll confirm with you, before sending emails to the participants.</h5>
            </div>
        }

        @if(Mode.In(Modes.ShowingErrors))
        {
            <div class="alert alert-danger" role="alert">
                <h4>There is a problem with the names in the hat.</h4>
                <hr>
                @if(Errors.Any())
                {
                    <ul>
                        @foreach(var error in Errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }
            </div>
        }

        @if(Mode.In(Modes.Staging))
        {
            <div class="container-fluid py-5">

                <div class="alert alert-info" role="alert">
                  <h4 class="alert-heading">The Hat Was Shaken, and Names Were Picked Successfully!</h4>
                  <hr>
                  <p class="mb-0">Does everything below look good?</p>
                </div>

                <table class="table table-striped" style="text-align: left" >
                    <thead>
                        <tr>
                            <th scope="col">Participant Name</th>
                            <th scope="col">Participant Email</th>
                            <th scope="col">Picked Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var participant in Hat.Participants)
                        {
                            <tr>
                                <td>@participant.Person.Name</td>
                                <td>@participant.Person.Email</td>
                                <td>@(WriteEligibleRecipients(participant))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <p>
                <button aria-label="Continue" type="button" class="btn btn-primary btn-lg">Everything Looks Good. Continue.</button>
            </p>

            <p>
                <button aria-label="Go Back" type="button" @onclick="SwitchToDefaultMode" class="btn btn-warning">Go Back</button>
            </p>
        }

    </div>
</div>

@code {
    Person? Person;

    Hat Hat = new Hat();

    Modes Mode = Modes.Default;

    enum Modes
    {
        Default,
        Adding,
        ShowingErrors,
        Staging
    }

    protected override async void OnInitialized() 
    {
        var savedHat = await TryLoadFromLocalStorageAsync();
        if (savedHat.success)
        {
            Hat = savedHat.hat!;
            StateHasChanged();
        }
        else
            SwitchToAddMode();
    }

    void SwitchToAddMode()
    {
        Person = new Person() { Id = System.Guid.NewGuid() };
        Mode = Modes.Adding;
    }

    void SwitchToDefaultMode() => Mode = Modes.Default;

    void Cancelled()
    {
        Mode = Modes.Default;
    }

    void SwitchMode(Modes mode) => Mode = mode;

    async void ParticipantEdited(Participant participant)
    {
        StateHasChanged();
        await SaveToLocalStorage();
    }

    async Task PersonAdded(Person person)
    {
        Hat.Participants ??= new List<Participant>();

        var newGiverRecipients = new List<Recipient>();

        // make person a recipient for all existing participants
        foreach (Participant ep in Hat.Participants)
        {
            // new person is recipient for existing participant
            ep.Recipients.Add(new Recipient(person, true));
            // existing participant is recipient for new person
            newGiverRecipients.Add(new Recipient(ep.Person, true));
        }

        // add new participant to hat
        var participant = new Participant(person) {
            Recipients = newGiverRecipients
        };

        Hat.Participants.Add(participant);

        SwitchMode(Modes.Default);

        await SaveToLocalStorage();
    }

    async Task<(bool success, Hat? hat)> TryLoadFromLocalStorageAsync()
    {
        Hat? hat = null;
        var hatJson = await Storage.GetFromLocalStorage("hat");

        try
        {
            hat = JsonSerializer.Deserialize<Hat>(hatJson);

            if (!hat?.Participants?.Any() ?? false)
                return (false, hat);

            // the hat from local storage isn't exactly the same as the hat that was saved
            // because through serialization / deserialization, participant people are no
            // longer the same objects as recipient people.
            // To get them to be the same object, rebuild recipient lists
            var participantPeople = hat!.Participants!.ToDictionary(x => x.Person.Id, x => x.Person);

            foreach(var partcipant in hat!.Participants!)
            {
                var newRecips = new List<Recipient>();

                foreach(var oldRecip in partcipant.Recipients)
                {
                    // old recipient found
                    if(participantPeople.TryGetValue(oldRecip.Person.Id, out var newRecip))
                        newRecips.Add(new Recipient(newRecip, oldRecip.Eligible));
                    // any old recipients not found in list of people will be lost
                }

                partcipant.Recipients = newRecips;
            }

        } catch
        {
            return (false, hat);
        }

        return (true, hat);
    }

    async Task SaveToLocalStorage()
    {
        var hatJson = JsonSerializer.Serialize(Hat);
        await Storage.SetLocalStorage("hat", hatJson);
    }

    List<string> Errors;

    async Task ShakeUpTheHat()
    {
        await SaveToLocalStorage();

        var (isValid, errors) = ValidationService.Validate(Hat);

        if(isValid)
            (isValid, errors) = EligibilityValidationService.Validate(Hat);

        if(isValid)
            (isValid, errors, Hat) = HatShakerService.ShakeMultiple(Hat, 100);

        Errors = errors!.ToList();

        if (!isValid)
            SwitchMode(Modes.ShowingErrors);
        else
            SwitchMode(Modes.Staging);
    }

    string WriteEligibleRecipients(Participant participant)
    {
        var s = new System.Text.StringBuilder();

        var names = participant
            .Recipients
            .Where(x => x.Eligible)
            .Select(x => x.Person)
            .Select(x => x.Name)
            .OrderBy(x => x)
            .ToList();

        for(int x = 0; x < names.Count; x++)
        {
            if(x > 0)
            {
                if (x == (names.Count - 1))
                    s.Append(" or ");
                else
                    s.Append(", ");
            }
            s.Append(names[x]);
        }

        return s.ToString();
    }

}