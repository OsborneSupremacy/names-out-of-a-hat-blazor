@page "/"
@inject NamesOutOfAHat2.Service.LocalStorageService Storage

@using System.Text.Json
@using NamesOutOfAHat2.Model

<div class="bg-light rounded-3">
    <div class="container-fluid py-5">
        <div class="jumbotron">
            <h1 class="display-5">Put everyone's name in the hat!</h1>
        </div>

        @if(Mode == Modes.Default)
        {
            <p>
                <button type="button" @onclick="SwitchToAddMode" class="btn btn-primary">Add a Participant</button>
            </p>
        }

        @if(Mode == Modes.Adding)
        {
            <AddParticipant Person="@Person" PersonAddedCallback="@PersonAdded" CancelCallback="@Cancelled" />
        }

        @if (Hat.Participants?.Any() ?? false)
        {
            @foreach(var participant in Hat.Participants)
            {
                <ParticipantDisplay Participant="@participant" ParticpantEditedCallback="@ParticipantEdited" />
            }
        }

    </div>
</div>

@code {
    Person? Person;

    Hat Hat = new Hat();

    Modes Mode = Modes.Default;

    enum Modes
    {
        Default,
        Adding
    }

    protected override async void OnInitialized() 
    {
        var savedHat = await TryLoadFromLocalStorageAsync();
        if (savedHat.success)
        {
            Hat = savedHat.hat!;
            StateHasChanged();
        }
        else
            SwitchToAddMode();
    }

    void SwitchToAddMode()
    {
        Person = new Person() { Id = System.Guid.NewGuid() };
        Mode = Modes.Adding;
    }

    void Cancelled()
    {
        Mode = Modes.Default;
    }

    void SwitchMode(Modes mode) => Mode = mode;

    void ParticipantEdited(Participant participant)
    {
        StateHasChanged();
        SaveToLocalStorage();
    }

    void PersonAdded(Person person)
    {
        Hat.Participants ??= new List<Participant>();

        // create recipient
        var recipient = new Recipient() 
        {
            Person = person,
            Eligible = true
        };

        var newGiverRecipients = new List<Recipient>();

        // make person a recipient for all existing participant
        foreach (Participant ep in Hat.Participants)
        {
            ep.Recipients.Add(recipient);
            newGiverRecipients.Add(new Recipient()
            {
                Person = ep.Person,
                Eligible = true
            });
        }

        // make existing people recipients for new participant

        // add new participant to hat
        var participant = new Participant() {
            Person = person,
            Recipients = newGiverRecipients
        };

        Hat.Participants.Add(participant);

        SwitchMode(Modes.Default);

        SaveToLocalStorage();
    }

    async Task<(bool success, Hat? hat)> TryLoadFromLocalStorageAsync()
    {
        Hat? hat = null;
        var hatJson = await Storage.GetFromLocalStorage("hat");

        try
        {
            hat = JsonSerializer.Deserialize<Hat>(hatJson);

            if (!hat?.Participants?.Any() ?? false)
                return (false, hat);

            // the hat from local storage isn't exactly the same as the hat that was saved
            // because through serialization / deserialization, participant people are no
            // longer the same objects as recipient people.
            // To get them to be the same object, rebuild recipient lists
            var participantPeople = hat!.Participants!.ToDictionary(x => x.Person.Id, x => x.Person);

            foreach(var partcipant in hat!.Participants!)
            {
                var newRecips = new List<Recipient>();

                foreach(var oldRecip in partcipant.Recipients)
                {
                    // old recipient found
                    if(participantPeople.TryGetValue(oldRecip.Person.Id, out var newRecip))
                    {
                        newRecips.Add(new Recipient()
                        {
                            Person = newRecip,
                            Eligible = oldRecip.Eligible
                        });
                    }
                    // any old recipients not found in list of people will be lost
                }

                partcipant.Recipients = newRecips;
            }

        } catch
        {
            return (false, hat);
        }

        return (true, hat);
    }

    async void SaveToLocalStorage()
    {
        var hatJson = JsonSerializer.Serialize(Hat);
        await Storage.SetLocalStorage("hat", hatJson);
    }

}