@page "/"
@inject NamesOutOfAHat2.Interface.ILocalStorageService Storage
@inject NamesOutOfAHat2.Client.Service.ClientHttpService ClientHttpService
@inject NamesOutOfAHat2.Service.HatService HatService
@inject NavigationManager NavigationManager

@using System.Text.Json
@using NamesOutOfAHat2.Model
@using NamesOutOfAHat2.Utility

<div class="container my-5">

    <GdprConsent Visible="Mode.In(Modes.Gdpr)" NextCallback="SaveGdprConsentToLocalStorage" />

    <SectionHeading Visible="@Mode.In(Modes.Default, Modes.Adding)" Text="Put everyone's name in the hat!" />

    <ButtonArea Visible="Mode.In(Modes.Default)">
        <button type="button" @onclick="AddMode" class="btn btn-primary">Add a Participant</button>
    </ButtonArea>

    <AddParticipant Visible="@Mode.In(Modes.Adding)" Person="Person" PersonAddedCallback="PersonAdded" CancelCallback="DefaultMode" />

    <ParticipantList 
        Visible="@(Mode.In(Modes.Default) && (Hat.Participants.Any()))" 
        SaveCallback="Save" 
        Hat="Hat"
        NextCallback="VerificationMode"
        ShowErrorsCallback="HatErrorsMode" />

    <HatErrors Visible="@Mode.In(Modes.ShowingErrors)" Hat="Hat" NextCallback="DefaultMode" />

    <Verification Visible="@Mode.In(Modes.Verification)" Hat="Hat" NextCallback="NextMode" PreviousCallback="DefaultMode" />

    <OrganizerSelect Visible="@Mode.In(Modes.Organizer)" Hat="Hat" NextCallback="NextMode" PreviousCallback="PreviousMode" />

    <SendVerificationEmail Visible="@Mode.In(Modes.SendVerifyEmail)" Hat="Hat" NextCallback="NextMode" NextSkipStepCallback="NextModeSkipStep" PreviousCallback="PreviousMode" />

    <ConfirmationCodeEntry Visible="@Mode.In(Modes.ConfirmationCodeEntry)" Hat="Hat" NextCallback="NextMode" PreviousCallback="PreviousMode" />

    <EmailPreview Visible="@Mode.In(Modes.EmailComposition)" Hat="Hat" NextCallback="Finalize" PreviousCallback="PreviousMode" />

    <Success Visible="@Mode.In(Modes.Success)" Hat="Hat" NextCallback="DefaultMode" />

    <ErrorDisplay Visible="@Mode.In(Modes.Failure)" ErrorDetails="ErrorDetails" NextCallback="DefaultMode" />

</div>

@code {
    Person? Person;

    Hat Hat = new ();

    Modes Mode = Modes.Gdpr;

    string ErrorDetails = default!;

    enum Modes : int
    {
        Gdpr = -1,
        Default = 0,
        Adding = 1,
        ShowingErrors = 2,
        Verification = 3,
        Organizer = 4,
        SendVerifyEmail = 5,
        ConfirmationCodeEntry = 6,
        EmailComposition = 7,
        Success = 8,
        Failure = 9
    }

    protected override async void OnInitialized()
    {
        Mode = Modes.Gdpr;
        if (await TryLoadGdprConsentFromLocalStorage())
        {
            Mode = Modes.Default;
            await InitializeHat();
        }
    }

    async Task InitializeHat()
    {
        var savedHat = await TryLoadHatFromLocalStorageAsync();
        if (savedHat.success)
        {
            Hat = savedHat.hat!;
            StateHasChanged();
        }
        else
            AddMode();
    }

    void AddMode()
    {
        Person = new Person() { Id = System.Guid.NewGuid() };
        Mode = Modes.Adding;
    }

    async Task NextMode()
    {
        Mode++;
        await SaveHatToLocalStorage();
    }

    async Task NextModeSkipStep()
    {
        Mode++;
        Mode++;
        await SaveHatToLocalStorage();
    }

    async Task PreviousMode()
    {
        Mode--;
        await SaveHatToLocalStorage();
    }

    async Task DefaultMode()
    {
        Mode = Modes.Default;
        await SaveHatToLocalStorage();
    }

    async Task VerificationMode()
    {
        Mode = Modes.Verification;
        await SaveHatToLocalStorage();
    }

    async Task HatErrorsMode()
    {
        SwitchMode(Modes.ShowingErrors);
    }

    void SwitchMode(Modes mode) => Mode = mode;

    async void Save()
    {
        await SaveHatToLocalStorage();
    }

    async void ParticipantEdited(Participant participant)
    {
        StateHasChanged();
        await SaveHatToLocalStorage();
    }

    async void ParticipantRemoved(Participant participant)
    {
        Hat = HatService.RemoveParticipant(Hat, participant);
        StateHasChanged();
        await SaveHatToLocalStorage();
    }

    async Task PersonAdded(Person person)
    {
        Hat = HatService.AddParticipant(Hat, person);
        await DefaultMode();
        await SaveHatToLocalStorage();
    }

    async Task SendCodeAndAdvance()
    {
        var (success, details) = await ClientHttpService.SendVerificationAsync(NavigationManager, Hat);

        if(success)
            await NextMode();
        else
        {
            ErrorDetails = details;
            SwitchMode(Modes.Failure);
        }
    }

    async Task<bool> TryLoadGdprConsentFromLocalStorage()
    {
        return bool.TryParse(await Storage.GetFromLocalStorage("gdprConsent"), out var consent) ? consent : false;
    }

    async Task SaveGdprConsentToLocalStorage()
    {
        await Storage.SetLocalStorage("gdprConsent", true.ToString());
        await NextMode();
        await InitializeHat();
    }

    async Task<(bool success, Hat? hat)> TryLoadHatFromLocalStorageAsync()
    {
        Hat? hat = null;
        var hatJson = await Storage.GetFromLocalStorage("hat");

        try
        {
            hat = JsonSerializer.Deserialize<Hat>(hatJson);
        }
        catch
        {
            return (false, hat);
        }

        if (!hat?.Participants.Any() ?? false)
            return (false, hat);

        hat = HatService.ReconstructParticipants(hat!);

        return (true, hat);
    }

    async Task SaveHatToLocalStorage()
    {
        var hatJson = JsonSerializer.Serialize(Hat);
        await Storage.SetLocalStorage("hat", hatJson);
    }

    async Task Finalize()
    {
        await SaveHatToLocalStorage();
        var (success, details) = await ClientHttpService.SendAsync(NavigationManager, Hat);

        if(success)
        {
            SwitchMode(Modes.Success);
        } else
        {
            ErrorDetails = details;
            SwitchMode(Modes.Failure);
        }
    }

}