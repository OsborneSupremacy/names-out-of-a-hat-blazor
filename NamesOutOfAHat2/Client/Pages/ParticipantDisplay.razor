@using NamesOutOfAHat2.Model

@*Display Mode*@
@if(Mode == Modes.Default)
{
    <div class="card mb-3" style="width: 18rem;display: inline-flex;margin: 10px;">
        <h5 class="card-header bg-info">@Participant.Person.Name</h5>
        <ul class="list-group list-group-flush">
        <li class="list-group-item">📧 @Participant.Person.Email</li>
        <li class="list-group-item">
            <label class="form-label"><b>🎁 Eligible Recipients</b></label>
            @foreach(var recipient in Participant.Recipients)
            {
                var id = System.Guid.NewGuid();
                <div class="form-check" style="text-align: left">
                    <input class="form-check-input" id="@id" type="checkbox" @bind="recipient.Eligible" />
                    <label class="form-check-label" for="@id" >@recipient.Person.Name</label>
                </div>
            }
        </li>
        <li class="list-group-item">
            <a href="#" class="btn btn-sm btn-primary" @onclick="Edit" >Edit</a>&nbsp;
            <a href="#" class="btn btn-sm btn-danger" @click="remove" >Remove</a>
        </li>
        </ul>
    </div>
}

@*Edit Mode*@
@if(Mode == Modes.Editing)
{
    <EditForm Model="@Participant.Person" >
        <div class="card mb-3" style="width: 18rem;display: inline-flex;margin: 10px;">
            <h5 class="card-header bg-info">@DisplayName</h5>
            <div class="card-body">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" @bind-value="Participant.Person.Name" />
                    <label for="Name">Name</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="email" class="form-control" @bind-value="Participant.Person.Email" />
                    <label for="Email">Email</label>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <button type="submit" class="btn btn-sm btn-primary" @onclick="Display">Done</button>&nbsp;
            </div>
        </div>
    </EditForm>
}

@code {

    Modes Mode = Modes.Default;

    enum Modes
    {
        Default,
        Editing
    }

    void Edit() => Mode = Modes.Editing;

    void Display() => Mode = Modes.Default;

    [Parameter]
    public Participant Participant { get; set; }

    public String DisplayName
    {
        get => (Participant.Person?.Name?.Trim().Length ?? 0) > 1 ? Participant.Person!.Name : "Participant";
    }

}